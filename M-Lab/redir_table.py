#!/usr/bin/env python

#
# Copyright (c) 2011 Simone Basso <bassosimone@gmail.com>,
#  NEXA Center for Internet & Society at Politecnico di Torino
#
# This file is part of Neubot <http://www.neubot.org/>.
#
# Neubot is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Neubot is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Neubot.  If not, see <http://www.gnu.org/licenses/>.
#

''' Build redirection table for the master server '''

import asyncore
import collections
import sys

def realmain():

    ''' Build redirection table for the master server '''

    #
    # TODO Change .dat files name in order to represent more
    # precisely what their content is.  E.g., instead of using
    # ip_addr.dat I should use slivers.dat.
    #

    sys.stderr.write('Loading slivers addresses...\n')
    slivers = {}
    filep = open('M-Lab/ip_addr.dat', 'rb')
    for line in filep:
        node, sliver = line.split()
        slivers[node] = sliver
    filep.close()
    sys.stderr.write('Loading slivers addresses... done\n')

    sys.stderr.write('Loading nodes location...\n')
    nodes_by_country = collections.defaultdict(set)
    nodes_by_continent = collections.defaultdict(set)
    filep = open('M-Lab/servers.dat', 'rb')
    for line in filep:
        fqdn, country, continent = line.split()
        if not fqdn in slivers:
            sys.stderr.write('No sliver for: %s, %s, %s\n' %
                               (fqdn, country, continent))
            continue
        address = slivers[fqdn]
        nodes_by_continent[continent].add(address)
        nodes_by_country[country].add(address)
    filep.close()
    sys.stderr.write('Loading nodes location... done\n')

    sys.stderr.write('Checking for empty continents...\n')
    for continent in ('AF', 'AS', 'EU', 'NA', 'SA', 'OC', 'AN'):
        if not continent in nodes_by_continent:
            # Common heuristics for continents without a node
            if continent == 'AF':
                nodes_by_continent['AF'] = nodes_by_continent['EU']
            elif continent == 'SA':
                nodes_by_continent['SA'] = nodes_by_continent['NA']
            elif continent == 'AS':
                nodes_by_continent['AS'] = nodes_by_continent['OC']
            elif continent == 'AN':
                nodes_by_continent['AN'] = nodes_by_continent['OC']
            else:
                sys.stderr.write('No solution for continent: %s\n' % continent)
    sys.stderr.write('Checking for empty continents... done\n')

    sys.stderr.write('Build redirection table...\n')
    redir_table = {}
    filep = open('M-Lab/countries.dat', 'rb')
    for line in filep:
        if line.startswith('#'):
            continue
        continent, country = line.split()[:2]
        if country in nodes_by_country:
            redir_table[country] = nodes_by_country[country]
        elif continent in nodes_by_continent:
            redir_table[country] = nodes_by_continent[continent]
        else:
            sys.stderr.write('Internal error: no country/continent: %s/%s\n' %
                              (country, continent))
            redir_table[country] = set(['master.neubot.org'])
    sys.stderr.write('Build redirection table... done\n')

    # Override Italy
    redir_table['IT'] = set(['master.neubot.org'])

    prefix = 'sqlite3 /var/neubot/database.sqlite3'
    sys.stdout.write('#!/bin/sh\n')
    sys.stdout.write('# Autogenerated by M-Lab/redir_table.py\n')
    sys.stdout.write("%s 'DROP TABLE geoloc;'\n" % prefix)
    for country, addresses in redir_table.items():
        for address in addresses:
            sys.stdout.write("%s 'INSERT INTO geoloc(id, country, address) "
                             "VALUES(NULL, \"%s\", \"%s:9773\");\n" %
                                 (prefix, country, address))

def main():
    ''' Wrapper for the real main '''
    try:
        realmain()
    except:
        sys.stderr.write('%s\n' % str(asyncore.compact_traceback()))
        sys.exit(1)

if __name__ == '__main__':
    main()
