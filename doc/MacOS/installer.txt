MacOSX installer
''''''''''''''''

:Version: 1.2 of 2011/09/06
:Authors: Simone Basso

This document explains briefly how is organized the Neubot installer
under MacOSX.  A paraller document, doc/updater/unix.txt, explains
how the automatic updates are supposed to work on top of what the package
installs into the system.


The bottom line is that we deploy Neubot-$VERSION.pkg along with a
plugin that asks the user to give the privacy permissions.  The package
skeleton is MacOS/Neubot-pkg.  (The name contains a dash instead of a
dot so that you can browse into it more easily.)


The Privacy plugin lives at MacOS/Privacy/.  Inside this directory
PrivacyPane.m implements the logic.  The pane contains two check
boxes: can_collect and can_share.

When the installer enters the pane, in both directions, the logic
checks can_collect value.  If it is false, the 'next' button is
disabled.  Otherwise it is enabled.  So the user cannot proceed if
she does not provide the permission to collect.

The same logic is run when the user changes the value of the
can_collect check box.

When the user tries to leave the pane, the action taken depends on
the direction.  The user can always go backward.  When she tries
to go forward the logic is as follows:

1. complain and return error if can_collect is false (it shouldn't!);

2. make sure that /tmp/neubot-can-share either does not exist or
   is a regular file;

3. open /tmp/neubot-can-share, write as '%d\n' into it the value
   of can_share, then close the file.

[Using a temporary file is not clean but we've been unable to find
 a better solution.  It seems the installer cannot pass information
 directly to the postflight script.  More details in the code.]

So, the Privacy plugin guarantees that the user is informed and
that we can collect.  Also, the output is a file in /tmp that tells
the value of the can_share setting.


Before the installer runs, the preflight script, which you can find
in MacOS/Neubot-pkg/Contents/Resources/preflight, will make sure that
the /tmp/neubot-can-share file actually exists.  If not, it aborts
the install because it means that our privacy panel didn't loaded for
whatever reason.


The installer installs Neubot at /usr/local/share/neubot.  We refer
to this directory as the BASEDIR.  Assuming that we're installing
Neubot 0.4.0 (whose numeric representation is 0.004000999, the BASEDIR
will contain)::

	0.004000999/
		.neubot-installed-ok
		Neubot.app/
		cmdline.sh*
		neubot.1
		neubot/
		prerun.sh*
		pubkey.pem
		start.sh*
		uninstall.sh*
	org.neubot.plist
	start.sh*

Where we define 0.004000999/ VERSIONDIR because it contains Neubot
sources as well as some helper scripts.

BASEDIR is designed like this to allow for automatic updates: it can
contain an arbitrary number of VERSIONDIRs and start.sh will locate the
most updated (correctly installed version) and will start it.  (We
say that a VERSIONDIR is correctly installed if it contains the hidden
file `.neubot-installed-ok`.)


We will return later on VERSIONDIR content: let's now discuss what
happens in the postflight script.  The script source can be found
at `MacOS/Neubot-pkg/Contents/Resources/postflight`.  Its logic is
as follows:

1. sorts VERSIONDIRs in numeric descending order and seeks for the
   first one that contains the .neubot-installed-ok (the OKFILE);

   (The loop over the directories checking for .neubot-installed-ok is
    just for robustness and uniformity with other scripts);

2. if found:

     2.1. if /Library/LaunchDaemons/org.neubot.plist exists, maybe
          there is an old version of Neubot running, so try to stop
          it using launchtl(1);

     2.2. runs VERSIONDIR/prerun.sh so that later it is possible
          to invoke Neubot directly;

     2.3. record the value stored in /tmp/neubot-can-share defaulting
          to false if in doubt;

     2.4. invoke neubot's privacy command to create an initial
          database with the specified privacy settings;

     2.5. installs org.neubot.plist at /Library/LaunchDaemons;

     2.6. load and start neubot via org.neubot.plist using
          the launchctl(1) tool (this causes the launchd(8)
          daemon basically to invoke VERSIONDIR/start.sh).

3. otherwise, print an error and exit.

(It's not implemented or designed very well yet, however auto-updating
should be a subset of these steps.  It will probably run step 2.1 and
2.5 only because the rest has already been done.)

The reason why org.neubot.plist is in BASEDIR and not in VERSIONDIR
is because it depends only on start.sh, which, too, is in BASEDIR.


launchctl(1) reads `/Library/LaunchDaemons/org.neubot.plist`.  This
file, located below MacOS/basedir-skel/versiondir-skel/, says that
the command to start Neubot is::

	/bin/sh /usr/local/share/neubot/start.sh

The source for this script is in `Macos/basedir-skel`.  This script
lists the directories in BASEDIR in numeric reverse order, seeking for
the first that contains .neubot-installed-ok (aka the OKFILE).  The
OKFILE is put there by the installer (or by the auto-updater) to hint
start.sh that the target VERSIONDIR has been successfully installed,
i.e. that nothing went wrong when unpacking the tarball.

If a correctly installed VERSIONDIR is found (which should always
happen, since there is at least the version installed with the package)
the script hands over the control to VERSIONDIR/start.sh.

The reason why the startup procedure is splitted between BASEDIR
and VERSIONDIR start.sh is the following: the former is installed
once and forever, while the latter is version specific.  So, with
automatic updates in place, obviously each version must performs
its own checks and setups.  (And note that we cannot rely on post-
flight for that because the automatic update is not done via a
package.)


VERSIONDIR/start.sh makes sure that everything is ready before
actually starting Neubot, invoking VERSIONDIR/prerun.sh.  Please
note that this is not needed after a clean install but will become
relevant after an auto-update.  Also, note that prerun.sh skips
the checks when VERSIONDIR/.skip-checks exists (which means that
it already performed all the checks successfully).  Otherwise
prerun.sh:

1. symlinks /Applications/Neubot.app to VERSIONDIR/Neubot.app/;

2. symlinks VERSIONDIR/cmdline.sh to /usr/local/bin/neubot;

3. symlinks VERSIONDIR/neubot.1 to /usr/local/share/man/man1/neubot.1;

4. makes sure that the group _neubot exists or creates it;

5. makes sure that the user _neubot exists or creates it;

6. makes sure that the group _neubot_update exists or creates it;

7. makes sure that the user _neubot_update exists or creates it;

8. creates VERSIONDIR/.skip-checks;

9. invokes sync(8) to flush file system buffers.	/* paranoia */

When prerun.sh returns, VERSIONDIR/start.sh actually starts the
neubot updater for Unix.  That is documented at doc/updater/unix.txt.


Note that VERSIONDIR also contains uninstall.sh that should
completely uninstall Neubot from the system.


The script to create the installer is MacOS/makepkg.py and is invoked
by the top-level Makefile.  You must run this script as root to ensure
correct ownership in the result package.  If everything is OK you get
a compressed tarball containing the pkg file in the TOPLEVEL/dist, ready
for distribution.

Very briefly the algorithm to create the package is as follows:

1. copy the package skeleton (MacOS/Neubot-pkg) over the directory
   that will contain the package (MacOS/Neubot-0.4.0.pkg);

2. populate the BASEDIR at a temporary location (MacOS/neubot)::

     2.1. copy the sources (neubot/) into the VERSIONDIR (which
          in this example is MacOS/neubot/0.004000999/);

     2.2. compile the sources at MacOS/neubot/0.004000999/ using
          standard library module compileall;

     2.3. copy the files in MacOS/basedir-skel/ (start.sh and
          org.neubot.plist) at MacOS/neubot/;

     2.4. copy the files in MacOS/basedir-skel/versiondir-skel (cmdline.sh,
          start.sh, prerun.sh and ininstall.sh) in MacOS/neubot/0.004000999/;

     2.5. copy the MacOS/Neubot-app tree to
          MacOS/neubot/0.004000999/Neubot.app;

     2.6. copy the manual page man/man1/neubot.1 into
          MacOS/neubot/0.004000999/;

     2.7. add .neubot-installed-ok to MacOS/neubot/0.004000999/ so that
          BASEDIR/start.sh will select this directory;

3. compress MacOS/neubot using pax and producing Archive.pax.gz (the
   format we use is cpio because the standard format triggers "obsolete
   package format" warnings in the system logger);

4. create Archive.bom from the content of MacOS/neubot -- the installer
   will read from the the permissions and ownership (I guess);

5. enter into the directory Privacy, compile the plugin and then move
   Privacy/build/Release/Privacy.bundle -- which is the plugin pan -- into
   Neubot-0.4.0.pkg/MacOS/Contents/Plugins/ and do the same for
   Privacy/InstallerSections.plist -- the file that tells the installer
   where to put the new pane -- and finally leave directory Privacy;

6. finally the tarball is created with the content of Neubot-0.4.0.pkg.
