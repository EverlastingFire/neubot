neubot.options
==============

Neubot options parser
^^^^^^^^^^^^^^^^^^^^^

:Manual section: 3
:Date: 2011-01-07
:Manual group: Neubot manual
:Version: Neubot 0.3.5

SYNOPSYS
````````

|   from neubot.options import OptionParser

DESCRIPTION
```````````

Neubot can read options from various configuration files, from the
environment, and from command line.

Options canonical form is *section.option=value*.  Where section
is the name of a Neubot module, option is the name of a scalar
variable within that module, and value is a string.  For example,
the option *database.path=/var/neubot/database.sqlite3* specifies
that the value of the variable *path* within *neubot/database.py*
should be set to */var/neubot/database.sqlite3*.

However, there are cases when options might not be specified in
their canonical form for convenience.

Setting default values
''''''''''''''''''''''

You might want to set some default values for the options.  To do
that, use the *set_option* method, that receives three arguments,
the name of the section, the name of the option, and the value.

Reading a configuration file
''''''''''''''''''''''''''''

You invoke the method *register_file* to registed a configuration
file that must be read later.  There is no limit on the maximum
number of configuration files you can register.  This method takes
just one argument, the configuration file path.

The method *merge_files* receives no arguments and reads all the
registed configuration files in FIFO order.

The format of a configuration file is as follows::

  [database]
  path = /var/neubot/database.sqlite3

  [ui]
  port = 9774
  address = 127.0.0.1

Reading the sample configuration file above will result in the
options *database.path*, *ui.port*, and *ui.address* being set.

The method *merge_files* prints an error using *neubot.log* and
exits if there is an error parsing an existing configuration file.
However, it will skip silently a configuration file that does not
exist.

Reading from environment
''''''''''''''''''''''''

To read options from the environment you invoke the method
*merge_environ*, which receives no arguments.  This method will
read options from the environment variable *NEUBOT_OPTIONS*.

The format of such variable is as follows::

  $ export NEUBOT_OPTIONS="ui.address=0.0.0.0 ui.port=9000"

Reading options from the variable in the example above will result
in the options *ui.address* and *ui.port* being set.

The method prints an error using *neubot.log* and exits if the
content of the environment variable is not well formed.

Reading from commandline
''''''''''''''''''''''''

Command line options may not be specified in canonical form.  In
particular, it is possible to omit both the section and the value.
If the section is missing a default value is used.  If the value
is missing, it is assumed an implied value of True.

So, assuming that the default section is *foo* the following command
line::

  $ neubot command -D foo.interval=3 -D foo.enable=True -Dbar.x=3.1

is equivalent to::

  $ neubot command -Dinterval=3 -Dfoo.enable -Dbar.x=3.1

When parsing command line options, you register the value of
interesting options using *register_opt*.  This method receives two
parameters, the value of the option and the default section name
to be used if needed.

Then, at a later time, you merge the values of the interesting
command line options invoking the *merge_opts* method, that takes
no arguments.

Getting options
'''''''''''''''

Once you have merged options from configuration files, environment,
and command line, you might want to retrieve the value of such
options.  In order to do that use the *get_option* method.  This
method receives two parameters, the section and the name of the
option.  This method always returns a string.  In addition there
are convenience methods to cast the value to something else.  Use
*get_option_int* to cast to integer, *get_option_uint* to cast
to an unsigned integer, *get_option_bool* to cast to boolean, and
*get_option_float* to cast to float.

These methods print an error using *neubot.log* and exit if the
requested option does not exist.

INTERFACE
`````````

In conclusion, here's the interface that we have described in this
manual page::

    class OptionParser(object):

        def set_option(self, section, option, value):
            "Sets the value of section.option to value."

        def register_file(self, path):
            "Register config file at path to be read later."

        def merge_files(self):
            "Merge the content of all the registered config files."

        def merge_environ(self):
            "Merge options from the NEUBOT_OPTION environment variable."

        def register_opt(self, option, default_sect):
            "Register command line option eventually using default_sect."

        def merge_opts(self):
            "Merge all registered command line options."

        def get_option(self, section, option):
            "Return the value of section.option or exits if not found."

        def get_option_int(self, section, option):
            "Same as above but also try to cast to int."

        def get_option_uint(self, section, option):
            "Same as above but also try to cast to unsigned int."

        def get_option_bool(self, section, option):
            "Same as above but also try to cast to boolean."

        def get_option_float(self, section, option):
            "Same as above but also try to cast to float."

AUTHOR
``````

| Simone Basso <bassosimone@gmail.com>

SEE ALSO
````````

| neubot(1)
