#!/usr/bin/env python2.6

# bin/unix/neubot
# Copyright (c) 2010 NEXA Center for Internet & Society

# This file is part of Neubot.
#
# Neubot is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Neubot is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Neubot.  If not, see <http://www.gnu.org/licenses/>.

import ConfigParser
import StringIO
import getopt
import logging
import logging.handlers
import os
import os.path
import pwd
import signal
import sys
import time

STDERR_FORMAT = "[%(asctime)s] <%(levelname)s> %(message)s"
SYSLOG_FORMAT = "neubot[%(process)d]: <%(levelname)s> %(message)s"
VERSION = "0.1.5"

USAGE =                                                                 \
"usage: neubot [--help] [-bEqVv] [-I dir] [-O option=value]\n"          \
"              [-P pidfile] [--] [command [option ...]]\n"

HELP =                                                                  \
USAGE +                                                                 \
"\n"                                                                    \
"Options:\n"                                                            \
"    -b              Background mode, become a daemon\n"                \
"    -E              Do not read any configuration file.\n"             \
"    --help          Print this help message and exit.\n"               \
"    -I dir          Prepend dir to Python search path.\n"              \
"    -O option=value Set the value of the specified option.\n"          \
"    -P pidfile      Pidfile to use in background mode.\n"              \
"    -q              Be more quiet, log less messages.\n"               \
"    -V              Print version number and exit.\n"                  \
"    -v              Be more verbose, log more messages.\n"             \
"\n"                                                                    \
"You don't need to specify commands unless you whish to play with\n"    \
"neubot internals.  If so, try `neubot help' for more help.\n"

def databasename():
    if os.getuid() == 0:
        name = "/var/neubot/database.txt"
    elif os.environ.has_key("HOME"):
        name = os.environ["HOME"] + "/.neubot/database.txt"
    else:
        name = "-"
    return name

def interrupt(signo, frame):
    logging.info("Got interrupt signal")
    os._exit(1)

def bootstrap():
    signal.signal(signal.SIGINT, interrupt)
    background = False
    incdir = "/usr/local/share"
    if not incdir in sys.path:
        sys.path.insert(0, incdir)
    noconf = False
    pidfile = "/var/run/neubot.pid"
    rcdir = "/etc/neubot"
    verbosity = logging.INFO
    try:
        options, arguments = getopt.getopt(sys.argv[1:], "bEI:O:P:qVv",
                                           ["help"])
    except getopt.error:
        sys.stderr.write(USAGE)
        sys.exit(1)
    filelike = StringIO.StringIO()
    filelike.write("[DEFAULT]\r\n")
    for opt, arg in options:
        if opt == "-b":
            background = True
        elif opt == "-E":
            noconf = True
        elif opt == "--help":
            sys.stdout.write(HELP)
            sys.exit(0)
        elif opt == "-I":
            sys.path.insert(0, os.path.abspath(arg))
        elif opt == "-O":
            filelike.write(arg + "\r\n")
        elif opt == "-P":
            pidfile = arg
        elif opt == "-q":
            verbosity += 10                                             # XXX
            if verbosity > logging.ERROR:
                verbosity = logging.ERROR
        elif opt == "-V":
            print "Neubot", VERSION
            sys.exit(0)
        elif opt == "-v":
            verbosity -= 10                                             # XXX
            if verbosity < logging.DEBUG:
                verbosity = logging.DEBUG
    logger = logging.getLogger()
    handler = logging.StreamHandler()
    formatter = logging.Formatter(STDERR_FORMAT)
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    logger.setLevel(verbosity)
    configparser = ConfigParser.RawConfigParser()
    if not noconf:
        rclist = [ rcdir + "/config" ]
        if os.environ.has_key("HOME"):
            rclist.append(os.environ["HOME"] + "/.neubot/config")
        for rc in rclist:
            if os.path.isfile(rc):
                logging.debug("Reading config file '%s'" % rc)
                configparser.read(rc)
    logging.debug("Reading options specified via -O option")
    filelike.seek(0)
    configparser.readfp(filelike, "(options specified via -O option)")
    filelike = None
    logging.debug("Trying to import NPL (Neubot Python Library)")
    import neubot
    if len(arguments) == 0:
        arguments = ["auto"]
    logging.debug("Setting the default umask")
    os.umask(022)
    if os.getuid() > 0 and os.environ.has_key("HOME"):
        confdir = os.environ["HOME"] + "/.neubot"
        if os.path.exists(confdir):
            if not os.path.isdir(confdir):
                logging.warning("%s: Should be a directory" % confdir)
                logging.warning("You might want to fix this by hand")
        else:
            logging.debug("Creating private confdir: %s" % confdir)
            os.mkdir(confdir)
    if not configparser.has_option("DEFAULT", "database.path"):
        database = databasename()
        if database != "-":
            if os.path.exists(database):
                if not os.path.isfile(database):
                    logging.warning("%s: Should be a regular file" % database)
                    logging.warning("You might want to fix this by hand")
            else:
                logging.debug("Creating database file: %s" % database)
                f = open(database, "wb")
                f = None
        logging.debug("Using default database file %s" % database)
        configparser.set("DEFAULT", "database.path", database)
    neubot.database.init(configparser)
    if background:
        logging.debug("Redirecting logs from stderr to syslog")
        handler = logging.handlers.SysLogHandler("/dev/log")
        formatter = logging.Formatter(SYSLOG_FORMAT)
        handler.setFormatter(formatter)
        logger.addHandler(handler)        # XXX
        logging.debug("Changing current directory to '/'")
        os.chdir("/")
        logging.debug("Detaching from the controlling terminal")
        if os.fork() > 0:
            if os.environ.has_key("HOME"):
                time.sleep(0.5)
            os._exit(0)
        logging.debug("Becoming a session leader")
        os.setsid()
        logging.debug("Detaching from the controlling session")
        if os.fork() > 0:
            os._exit(0)
        logging.debug("Now running in background as a daemon")
        logging.debug("Ignoring the INT signal")
        signal.signal(signal.SIGINT, signal.SIG_IGN)
        try:
            f = open(pidfile, "wb")
            f.write(str(os.getpid()) + "\n")
            f.close()
        except IOError:
            logging.warning("Could not write pidfile '%s'" % pidfile)
        if os.getuid() == 0:
            logging.debug("Trying to drop root privileges")
            try:
                pw = pwd.getpwnam("_neubot")
            except KeyError:
                logging.error("Could not get '_neubot'"    \
                    "user information from password file")
                sys.exit(1)
            os.setgid(pw.pw_gid)
            os.setuid(pw.pw_uid)
        logging.debug("Redirecting stdio to '/dev/null'")
        logging.debug("(That's the last message you will see on console)")
        for fd in range(0, 3):
            os.close(fd)
        stdin = os.open("/dev/null", os.O_RDWR)
        for fd in range(1, 3):
            os.dup2(stdin, fd)
    if os.environ.has_key("NEUBOT_TRACE"):
        trace = os.environ["NEUBOT_TRACE"]
        if trace.upper() not in ["FALSE", "NO", "0"]:
            sys.setprofile(neubot.debug.trace)
    neubot.log.install()
    neubot.main.main(arguments)

if __name__ == "__main__":
    bootstrap()
