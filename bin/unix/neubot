#!/usr/bin/env python

# bin/unix/neubot
# Copyright (c) 2010 NEXA Center for Internet & Society

# This file is part of Neubot.
#
# Neubot is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Neubot is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Neubot.  If not, see <http://www.gnu.org/licenses/>.

import ConfigParser
import StringIO
import getopt
import logging
import logging.handlers
import os
import os.path
import pwd
import sys

STDERR_FORMAT = "<%(levelname)s> %(message)s"
SYSLOG_FORMAT = "neubot[%(process)d]: " + STDERR_FORMAT
USAGE = "Usage: neubot [-bEv] [-I path] [-O option] [--] [command [opts]]\n"

def bootstrap():
	background = False
	configuration = {}
	incdir = "/usr/share"
	noconf = False
	pidfile = "/var/run/neubot.pid"
	rcdir = "/etc/neubot"
	verbose = False
	try:
		options, arguments = getopt.getopt(sys.argv[1:], "bEI:O:v")
	except getopt.error:
		sys.stderr.write(USAGE)
		sys.stderr.write("Try `neubot help' for more help.\n")
		sys.exit(1)
	for opt, arg in options:
		if (opt == "-b"):
			background = True
		elif (opt == "-E"):
			noconf = True
		elif (opt == "-I"):
			incdir = arg
		elif (opt == "-O"):
			configparser = ConfigParser.RawConfigParser()
			content = "[DEFAULT]\n" + arg + "\n"
			filelike = StringIO.StringIO(content)
			try:
				configparser.readfp(filelike)
			except ConfigParser.Error:
				sys.stderr.write("Bad syntax: -O '%s'\n" % arg)
				sys.exit(1)
			for key, value in configparser.items("DEFAULT"):
				if (not configuration.has_key(key)):
					configuration[key] = value
		elif (opt == "-v"):
			verbose = True
	logger = logging.getLogger()
	handler = logging.StreamHandler()
	formatter = logging.Formatter(STDERR_FORMAT)
	handler.setFormatter(formatter)
	logger.addHandler(handler)
	if (verbose):
		logger.setLevel(logging.DEBUG)
		logging.info("Running in verbose mode")
	if (os.environ.has_key("HOME")):
		path = os.environ["HOME"] + "/.neubot"
		if (not os.path.exists(path)):
			logging.info("Creating %s directory" % path)
			os.umask(022)
			os.mkdir(path)
	if (not noconf):
		configparser = ConfigParser.RawConfigParser()
		rclist = [ rcdir + "/config" ]
		if (os.environ.has_key("HOME")):
			rclist.append(os.environ["HOME"] + "/.neubot/config")
		for rc in rclist:
			logging.info("Trying rcfile '%s'" % rc)
			configparser.read(rc)
		for key, value in configparser.items("DEFAULT"):
			if (not configuration.has_key(key)):
				configuration[key] = value
	if (not incdir in sys.path):
		logging.info("Prepend '%s' to sys.path" % incdir)
		sys.path.insert(0, incdir)
	logging.info("Trying to import neubot")
	try:
		import neubot
	except ImportError:
		logging.error("Could not import neubot (Try using -I)")
		sys.exit(1)
	if (len(arguments) == 0):
		arguments = ["_neubot"]
	name = arguments[0]
	logging.info("Looking-up command: '%s'" % name)
	try:
		exec("from neubot.application.%s import main" % name)
	except ImportError:
		logging.error("Unknown command: '%s'" % name)
		sys.exit(1)
	if (background):
		logging.info("Redirecting logs to syslog")
		handler = logging.handlers.SysLogHandler("/dev/log")
		formatter = logging.Formatter(SYSLOG_FORMAT)
		handler.setFormatter(formatter)
		logger.addHandler(handler)		# XXX
		logging.info("Moving to root directory")
		os.chdir("/")
		logging.info("Using the default umask")
		os.umask(0)
		logging.info("Redirect stdio to /dev/null")
		for fd in range(0, 3):
			os.close(fd)
		stdin = os.open("/dev/null", os.O_RDWR)
		for fd in range(1, 3):
			os.dup2(stdin, fd)
		logging.info("Detaching from the controlling terminal")
		if (os.fork() > 0):
			os._exit(0)
		logging.info("Becoming a session leader")
		os.setsid()
		logging.info("Detaching from the controlling session")
		if (os.fork() > 0):
			os._exit(0)
		logging.info("Now running in background")
		logging.info("Trying to write the pidfile '%s'" % pidfile)
		try:
			f = open(pidfile, "wb")
			f.write(str(os.getpid()) + "\n")
			f.close()
		except IOError:
			pass
		if (os.getuid() == 0):
			logging.info("Trying to become the '_neubot' user")
			try:
				pw = pwd.getpwnam("_neubot")
			except KeyError:
				logging.error("Could not get '_neubot'"	\
				    "user information from password file")
				sys.exit(1)
			os.setgid(pw.pw_gid)
			os.setuid(pw.pw_uid)
			logging.info("Now running as the '_neubot' user")
	logging.info("Invoking command: '%s'" % name)
	main(configuration, arguments)

if (__name__ == "__main__"):
	bootstrap()
