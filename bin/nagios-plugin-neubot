#!/usr/bin/env python

#
# Copyright (c) 2011 Simone Basso <bassosimone@gmail.com>,
#  NEXA Center for Internet & Society at Politecnico di Torino
#
# This file is part of Neubot <http://www.neubot.org/>.
#
# Neubot is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Neubot is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Neubot.  If not, see <http://www.gnu.org/licenses/>.
#

"""
Simple plugin for Nagios that returns the state of the Neubot
server, and possibly much more information, via the Server-Side
API (SAPI) implemented at <neubot/server.py>.

I've written this Nagios plugin after reading the instructions found
at <http://www.tylerlesmann.com/2009/sep/03/writing-nagios-plugin-python/>.
According to this website, the administrator should add something like
this to the configuration of Nagios::

    define command {
        command_name        check_neubot
        command_line        /usr/local/bin/nagios-plugin-neubot
    }

    define service {
        use                 generic-service
        service_description Neubot server
        check_command       check_neubot
        host_name           localhost
    }

This recipe is untested but hopefully it should work to monitor
a Neubot instance from within the same machine, i.e. using 127.0.0.1
to access it.  I am reluctant to expose this interface over the
network so if the plugin should be used from another machine better
to just connect to the negotiator and see what happens.
"""

import pwd
import getopt
import socket
import httplib
import signal
import os
import sys

if __name__ == "__main__":
    sys.path.insert(0, ".")

def _got_alarm(signo, frame):
    """ Time to commit suicide because we failed """
    sys.stdout.write("CRITICAL: Watchdog timeout\n")
    sys.exit(2)

USAGE_SHORT = "Usage: nagios-plugin-neubot [-?hvV] [--version] [--help]\n"

USAGE_LONG = '''
Version: 0.4.1-rc4
Purpose: Monitor Neubot server
Usage: nagios-plugin-neubot [-?hvV] [--version] [--help]
Options:
    -?            : Print brief help message
    -h|--help     : Print detailed help message
    -v            : No-op for compatibility with Nagios specs
    -V|--version  : Print version number

'''

def __getopt(args):
    """ Process command line options """

    try:
        options, arguments = getopt.getopt(args[1:], "?hvV",
                               ["version", "help"])
    except getopt.error:
        sys.stdout.write(USAGE_SHORT)
        sys.exit(3)

    for tpl in options:
        name = tpl[0]
        if name == "-h" or name == "--help":
            sys.stdout.write(USAGE_LONG)
            sys.exit(0)
        elif name == "-?":
            sys.stdout.write(USAGE_SHORT)
            sys.exit(0)
        elif name == "-V" or name == "--version":
            sys.stdout.write("Neubot 0.4.1-rc4\n")
            sys.exit(0)
        else:
            pass

    if arguments:
        sys.stdout.write(USAGE_SHORT)
        sys.exit(3)

def __die_if_running_as_root():
    """ We should not be running as root, because Nagios should
        run its plugins as user `nagios`.  Nonetheless check that
        for additional robustness. """

    if not os.getuid():
        sys.stdout.write("CRITICAL: plugin running as root\n")
        sys.exit(2)

def main(args):
    """ Monitor Neubot via https://127.0.0.1:9775/sapi/ """

    __die_if_running_as_root()
    __getopt(args)

    try:
        signal.alarm(10)
        signal.signal(signal.SIGALRM, _got_alarm)
    except Exception, why:
        sys.stdout.write("CRITICAL: cannot arm timer: %s\n" % str(why))
        sys.exit(2)

    try:
        socket.setdefaulttimeout(3)
    except Exception, why:
        sys.stdout.write("CRITICAL: socket.setdefaultimeout(): %s\n" %
                         str(why))
        sys.exit(2)

    try:
        connection = httplib.HTTPSConnection("127.0.0.1", "9775")
    except Exception, why:
        sys.stdout.write("CRITICAL: httplib.HTTPConnection(): %s\n" % str(why))
        sys.exit(2)

    try:
        connection.request("GET", "/sapi/")
    except Exception, why:
        sys.stdout.write("CRITICAL: connection.request(): %s\n" % str(why))
        sys.exit(2)

    try:
        response = connection.getresponse()
    except Exception, why:
        sys.stdout.write("CRITICAL: connection.getresponse(): %s\n" % str(why))
        sys.exit(2)

    if response.status != 200:
        sys.stdout.write("CRITICAL: invalid status: %d\n" % response.status)
        sys.exit(2)

    try:
        response.read()
    except Exception, why:
        sys.stdout.write("CRITICAL: response.read(): %s\n" % str(why))
        sys.exit(2)

    sys.stdout.write("OK: Neubot server is UP\n")

if __name__ == "__main__":
    main(sys.argv)
