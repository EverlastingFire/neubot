#!/usr/bin/python

#
# Copyright (c) 2012 Simone Basso <bassosimone@gmail.com>,
#  NEXA Center for Internet & Society at Politecnico di Torino
#
# This file is part of Neubot <http://www.neubot.org/>.
#
# Neubot is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Neubot is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Neubot.  If not, see <http://www.gnu.org/licenses/>.
#

''' Regress helper '''

#
# Automatically writes the print and suffix after a test in
# a regression script.  This should reduce the errors when you
# are writing and testing the regression script.
#

import shlex
import re
import sys

START = '''\
printf "%s"
(
    set -e'''

CHECK_SUCCESS = '''\
)
if [ $? -ne 0 ]; then
    printf "%s\\n"
    exit 1
fi
printf "%s\\n"'''

CHECK_FAILURE = '''\
)
if [ $? -eq 0 ]; then
    printf "%s\\n"
    exit 1
fi
printf "%s\\n"'''

REGEX = '\<\?rh (.*) \?\>'

def expand_macros(content):
    ''' Read file and expand macros '''

    inside = False
    for chunk in re.split(REGEX, content):
        if inside:
            inside = False

            tokens = shlex.split(chunk)
            if tokens[0] == 'start':
                sys.stdout.write(START % tokens[1])
            elif tokens[0] == 'check_success':
                sys.stdout.write(CHECK_SUCCESS % (tokens[2], tokens[1]))
            elif tokens[0] == 'check_failure':
                sys.stdout.write(CHECK_FAILURE % (tokens[2], tokens[1]))
            else:
                raise RuntimeError('Invalid macro: %s' % tokens[0])

        else:
            sys.stdout.write(chunk)
            inside = True

def main():
    ''' Main function '''
    for arg in sys.argv[1:]:
        expand_macros(open(arg, 'rb').read())

if __name__ == '__main__':
    main()
